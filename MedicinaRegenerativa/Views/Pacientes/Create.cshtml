@model MedicinaRegenerativa.Models.Pacientes
@using MedicinaRegenerativa.Infraestructura
@{
    ViewBag.Title = "Crear Paciente";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Crear Paciente</h2>
<script src="~/Scripts/jquery-ui.js"></script>
<link href="~/Content/jquery/jquery-ui.css" rel="stylesheet">
<script src="@Url.Content("~/Scripts/autocomplete.js")" type="text/javascript"></script>
@Styles.Render("~/Content/css2Select")
@section Scripts {
    @Scripts.Render("~/bundles/bootstrapDateTimePicker")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/select2")
}
@Styles.Render("~/Content/cssFechas")

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Pacientes</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.NombreCompleto, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NombreCompleto, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NombreCompleto, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Documento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Documento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Documento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.mail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.mail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.mail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.cuit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.cuit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cuit, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ciudad, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @Html.AutocompleteFor(model => model.ciudad, "ObtenerCiudades", "Pacientes")
                @Html.ValidationMessageFor(model => model.ciudad, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.pais, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.AutocompleteFor(model => model.pais, "ObtenerPaises", "Pacientes")
                @Html.ValidationMessageFor(model => model.pais, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.provincia, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.AutocompleteFor(model => model.provincia, "ObtenerProvincias", "Pacientes")
                @Html.ValidationMessageFor(model => model.provincia, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.observaciones, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                
                @Html.TextAreaFor(model => model.observaciones, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.observaciones, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.idObraSocial, "Obra Social", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("idObraSocial", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idObraSocial, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.nroSocioObraSocial, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nroSocioObraSocial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nroSocioObraSocial, "", new { @class = "text-danger" })
            </div>
        </div>
        @*<div class="form-group">
            @Html.LabelFor(model => model.pais, "pais", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("pais", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idObraSocial, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                
                @Html.EditorFor(model => model.FechaNacimiento, "", new { htmlAttributes = new { @class = "form-control" } })                                                
                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>       
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Crear" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver al Listado", "Index")
</div>

<script type="text/javascript">
    /*$(function () {
        $("#FechaNacimiento").datepicker({
            changeMonth: true,
            changeYear: true,
            showButtonPanel: true,
            format: "dd/mm/yyyy",
            language: "es",
        });
    });*/    
    $(function () {
        $('#FechaNacimiento').datetimepicker({
            format: "YYYY/MM/DD",
            /*format: "DD/MM/YYYY",*/
            /*extraFormats: ['DD/MM/YY'],*/ viewMode: 'years'
        });       
    });
    $(document).ready(function () {        
        $("#idObraSocial").select2();
        $("#pais").select2();
       /* $("#ciudad").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Pacientes/ObtenerCiudade",
                    type: "POST",
                    dataType: "json",
                    data: { Prefix: request.term },
                    success: function (data) {
                        if (data.success) {
                            alert(data.Pacientes[0].ciudad)
                            response($.map(data.Pacientes, function (item) {
                                return { label: item.ciudad, value: item.ciudad };
                            }))
                        }

                    },
                    error: function (jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    alert(msg);
                },
                })
            },
            messages: {
                noResults: "", results: ""
            }
        });
        */
        
    });
    
</script>

